// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2471.BunnyBot2015;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveSpeedController5;
    public static SpeedController driveSpeedController6;
    public static Encoder driveQuadratureEncoder1;
    public static Encoder driveQuadratureEncoder2;
    public static SpeedController driveSpeedController1;
    public static SpeedController driveSpeedController2;
    public static SpeedController driveSpeedController3;
    public static SpeedController driveSpeedController4;
    public static RobotDrive driveRobotDrive41;
    public static SpeedController elbowSpeedController1;
    public static SpeedController collectorTopRoller;
    public static SpeedController collectorBottomRoller;
    public static Solenoid collectorTopRollerInOut;
    public static SpeedController storageRollers;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSpeedController5 = new Talon(4);
        LiveWindow.addActuator("Drive", "Speed Controller 5", (Talon) driveSpeedController5);
        
        driveSpeedController6 = new Talon(5);
        LiveWindow.addActuator("Drive", "Speed Controller 6", (Talon) driveSpeedController6);
        
        driveQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "Quadrature Encoder 1", driveQuadratureEncoder1);
        driveQuadratureEncoder1.setDistancePerPulse(1.0);
        driveQuadratureEncoder1.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveQuadratureEncoder2 = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "Quadrature Encoder 2", driveQuadratureEncoder2);
        driveQuadratureEncoder2.setDistancePerPulse(1.0);
        driveQuadratureEncoder2.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveSpeedController1 = new Talon(0);
        LiveWindow.addActuator("Drive", "Speed Controller 1", (Talon) driveSpeedController1);
        
        driveSpeedController2 = new Talon(1);
        LiveWindow.addActuator("Drive", "Speed Controller 2", (Talon) driveSpeedController2);
        
        driveSpeedController3 = new Talon(2);
        LiveWindow.addActuator("Drive", "Speed Controller 3", (Talon) driveSpeedController3);
        
        driveSpeedController4 = new Talon(3);
        LiveWindow.addActuator("Drive", "Speed Controller 4", (Talon) driveSpeedController4);
        
        driveRobotDrive41 = new RobotDrive(driveSpeedController1, driveSpeedController2,
              driveSpeedController3, driveSpeedController4);
        
        driveRobotDrive41.setSafetyEnabled(true);
        driveRobotDrive41.setExpiration(0.1);
        driveRobotDrive41.setSensitivity(0.5);
        driveRobotDrive41.setMaxOutput(1.0);

        elbowSpeedController1 = new Talon(6);
        LiveWindow.addActuator("Elbow", "Speed Controller 1", (Talon) elbowSpeedController1);
        
        collectorTopRoller = new Talon(7);
        LiveWindow.addActuator("Collector", "TopRoller", (Talon) collectorTopRoller);
        
        collectorBottomRoller = new Talon(8);
        LiveWindow.addActuator("Collector", "BottomRoller", (Talon) collectorBottomRoller);
        
        collectorTopRollerInOut = new Solenoid(0, 0);
        LiveWindow.addActuator("Collector", "TopRollerInOut", collectorTopRollerInOut);
        
        storageRollers = new Talon(9);
        LiveWindow.addActuator("Storage", "Rollers", (Talon) storageRollers);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
